name: CI Quality Checks

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          # Install htmlproofer gem for link checking
          gem install html-proofer
          
      - name: Build Jekyll site
        run: bundle exec jekyll build
        env:
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JEKYLL_ENV: production
          
      - name: Test with HTMLProofer
        run: |
          # Run HTMLProofer with sensible defaults
          # --disable-external: Only check internal links (faster, more reliable)
          # --allow-hash-href: Allow href="#" 
          # --ignore-empty-alt: Don't fail on missing alt tags for now
          # --ignore-missing-alt: Same as above
          # --no-enforce-https: Don't require HTTPS for all links
          htmlproofer ./_site \
            --disable-external \
            --allow-hash-href \
            --ignore-empty-alt \
            --ignore-missing-alt \
            --no-enforce-https \
            --ignore-urls "/^#/,/^mailto:/" \
            --ignore-files "./_site/assets/.*" \
            || echo "HTMLProofer found some issues (see above)"
          
      - name: Validate post frontmatter
        run: |
          echo "Checking post frontmatter consistency..."
          failed=0
          
          # Check that all posts have required frontmatter
          for file in _posts/*.md; do
            echo "Checking $file..."
            
            # Check for title
            if ! grep -q "^title:" "$file"; then
              echo "‚ùå Missing title in $file"
              failed=1
            fi
            
            # Check for date
            if ! grep -q "^date:" "$file"; then
              echo "‚ùå Missing date in $file" 
              failed=1
            fi
            
            # Check for layout
            if ! grep -q "^layout:" "$file"; then
              echo "‚ùå Missing layout in $file"
              failed=1
            fi
          done
          
          if [ $failed -eq 0 ]; then
            echo "‚úÖ All posts have required frontmatter"
          else
            exit 1
          fi
          
      - name: Check for duplicate post titles
        run: |
          echo "Checking for duplicate post titles..."
          
          # Extract titles and check for duplicates
          grep -h "^title:" _posts/*.md | sed 's/title: *//' | sort | uniq -d > duplicates.txt
          
          if [ -s duplicates.txt ]; then
            echo "‚ùå Found duplicate titles:"
            cat duplicates.txt
            exit 1
          else
            echo "‚úÖ No duplicate titles found"
          fi
          
      - name: Validate categories and tags
        run: |
          echo "Checking categories and tags formatting..."
          
          for file in _posts/*.md; do
            # Check if categories/tags are properly formatted as YAML lists
            if grep -q "^categories:" "$file"; then
              # Check if it's using the old inline format
              if grep -q "^categories:.*[a-zA-Z].*[a-zA-Z]" "$file"; then
                echo "‚ö†Ô∏è  Warning: $file might be using inline categories format instead of YAML list"
              fi
            fi
          done
          
          echo "‚úÖ Category and tag check complete"
          
      - name: Build statistics
        run: |
          echo "üìä Build Statistics:"
          echo "Total posts: $(ls -1 _posts/*.md | wc -l)"
          echo "Total pages generated: $(find _site -name "*.html" | wc -l)"
          echo "Site size: $(du -sh _site | cut -f1)"
          
  deploy-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ All quality checks passed! Your changes are ready to be merged.'
            })